<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Roaming on Fuyi Atlas</title>
    <link>https://fuyi-atlas.github.io/tags/roaming/</link>
    <description>Recent content in Roaming on Fuyi Atlas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 02 Mar 2023 21:13:21 +0800</lastBuildDate>
    <atom:link href="https://fuyi-atlas.github.io/tags/roaming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Computer System Roaming</title>
      <link>https://fuyi-atlas.github.io/posts/computer/computer-system-roaming/</link>
      <pubDate>Thu, 02 Mar 2023 21:13:21 +0800</pubDate>
      <guid>https://fuyi-atlas.github.io/posts/computer/computer-system-roaming/</guid>
      <description>前言 此为深入理解计算机系统（csapp）第一章的笔记，也算是一个开始了。
Hello程序 #include &amp;lt;studio.h&amp;gt; int main() { printf(&amp;#34;hello world\n&amp;#34;); return 0; } 基本思想 系统中所有的信息——包括磁盘文件、内存中的程序、内存中存放的用户数据以及网络上传输的数据，都是由一串比特（bit）表示的。区分不同数据对象的唯一方法是我们读到这些数据对象时的上下文。比如，在不同的上下文中，一个同样的字节序列可能表示一个整数、浮点数、字符串或者机器指令。
要点 源程序实际上就是一个由0和1组成的位（或称为比特：bit）序列，8个位为一组，称为字节（byte）。
大部分的现代计算机系统都使用ASCII标准来表示文本字符，这种方式实际上就是用一个唯一的单字节大小的整数值来表示每个字符
hello.c程序是以字节序列的方式存储在文件中。每个字节都有一个整数值，对应于某些字符（注意：每个文本行都是以一个看不见的换行符“/n”来结束的）
只由ASCII字符构成的文件称为文本文件，所有其他文件都称为二进制文件
编译系统（compilation system）：编译的四个阶段
gcc -o hello hello.c hello.c（文本） —&amp;gt; 预处理器[cpp] —&amp;gt; hello.i（文本） —&amp;gt; 编译器[ccl] —&amp;gt; hello.s（文本） —&amp;gt; 汇编器[as] —&amp;gt; hello.o（二进制） —&amp;gt; 链接器[ld] —&amp;gt; hello（二进制）
预处理：预处理器处理#开头的命令，修改原始的C程序 编译：编译器将hello.i翻译为hello.s，即将源文件翻译为汇编语言。汇编语言是非常有用的，因为它为不同高级语言的不同编译器提供了通用的输出语言。例如，C编译器和Fortran编译器产生的输出文件用的都是一样的汇编语言 汇编：汇编器将hello.s翻译为机器语言指令，把这些指令打包成一种叫做可重定位目标程序（relocation object program）的格式，并将结果保存在目标文件hello.o中。hello.o是一个二进制文件（即将汇编内容翻译为机器语言指令，并将这些指令打包成一种叫做可重定位目标程序的格式） 链接：链接器用于处理合并。比如在hello程序中调用了printf函数，它是每个C编译器都提供的标准C库中的一个函数。printf函数存在于一个名为printf.o的单独的预编译好了的目标文件中，而这个文件必须以某种方式合并到hello.o程序中。链接器就负责处理这种合并。最终得到hello文件，它是一个可执行目标文件（或简称为可执行文件），可以被加载到内存中，由系统执行 shell是一个命令行解释器，它输出一个提示符，等待输入一个命令行，然后执行这个命令。如果该命令行的单词不是一个内置的命令，那么shell就会u假设这是一个可执行文件的名字，它将加载并运行这个文件。
系统的硬件组成 CPU：中央处理单元； ALU：算术/逻辑单元； PC：程序计数器； USB：通用串行总线 总线 贯穿整个系统的是一组电子管道，称做总线，它携带信息字节并负责在各个部件间传递。硬件之间进行信息交流需要有一个统一的标准，也就是二进制信息传递规则，为了高效考虑，通常总线被设计成传送定长的字节块，也就是字（word）。字中的字节数（即字长）是一个基本的系统参数，在各个系统中的情况都不尽相同。现在的大多数机器字长要么是4个字节（32位），要么是8个字节（64位）。
I/O设备 输入 / 输出（I/O）设备是系统与外部世界的联系通道。每个 I/O 设备都通过一个控制器或适配器与 I/O 总线相连。控制器与适配器之间的区别主要在于它们的封装方式。控制器是 I/O 设备本身或者系统的主印制电路板（通常称为主板）上的芯片组。而适配器则是一块插在主板插槽上的卡。无论如何，它们的功能都是在 I/O 总线和 I/O 设备之间传递信息。</description>
    </item>
  </channel>
</rss>
